package hans.leetcode.tree.bst;

import hans.common.pojo.TreeNode;
import org.junit.Test;

/**
 Given a binary search tree (BST), find the lowest common ancestor (LCA) of two
 given nodes in the BST.

 According to the definition of LCA on Wikipedia: ‚ÄúThe lowest common ancestor
 is defined between two nodes p and q as the lowest node in T that has both p and
 q as descendants (where we allow a node to be a descendant of itself).‚Äù


 Example 1:


 Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
 Output: 6
 Explanation: The LCA of nodes 2 and 8 is 6.


 Example 2:


 Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
 Output: 2
 Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of
 itself according to the LCA definition.


 Example 3:


 Input: root = [2,1], p = 2, q = 1
 Output: 2



 Constraints:


 The number of nodes in the tree is in the range [2, 10‚Åµ].
 -10‚Åπ <= Node.val <= 10‚Åπ
 All Node.val are unique.
 p != q
 p and q will exist in the BST.

 Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ‰∫åÂèâÊêúÁ¥¢Ê†ë ‰∫åÂèâÊ†ë üëç 738 üëé 0

 */

public class E_0235_lowestCommonAncestorInBST {

    @Test
    public void test() {
        Integer[] arr = new Integer[]{3,1,4,Integer.MIN_VALUE,2};
        TreeNode integerTreeNode = TreeNode.buildTree(arr);
        integerTreeNode.prettyPrint();
        TreeNode treeNode = this.lowestCommonAncestor(integerTreeNode, new TreeNode(2), new TreeNode(3));
        System.out.println(treeNode.val);
    }

    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        /*
        ÊêúÁ¥¢‰∫åÂèâÊ†ëÁâπÁÇπÔºåÊâÄÊúâËäÇÁÇπÂùáÈÅµÂæ™Â¶Ç‰∏ãËßÑÂàôÔºöleft<root<right
        Êúâ‰∫ÜËøô‰∏™ËßÑÂàôÔºåÊâæÊúÄÂ∞èÁ•ñÂÖàÂ∞±ÂæàÁÆÄÂçï‰∫Ü
              4
            /   \
           2     10
          / \   / \
         1  3  9   18
              /   /  \
             6   16  20
            / \     /  \
           5   7   19   21
         ÂºïÁî≥‰∏Ä‰∏ãBSTÁöÑÁâπÁÇπÔºåÂç≥: (root-left) * (root-right) < 0
         Âõ†‰∏∫Â∑¶‰æßÈÉΩÊØîrootÂ∞èÔºåÊâÄ‰ª•root-left>0; Âè≥‰æßÈÉΩÊØîrootÂ§ßÔºåÊâÄ‰ª•root-right<0ÔºåÈÇ£‰πà‰πòÁßØ‰∏ÄÂÆö<0
         ‰ªéÈ¢òÊÑèÁúãÂá∫ÔºåËæìÂÖ•1,2 ‰ºöËøîÂõû2ÔºåÂç≥ancestorÊòØÁªôÂá∫ÁöÑËäÇÁÇπ‰πã‰∏ÄÔºåÂàô‰πòÁßØ‰∏∫0

         ÂΩíÁ∫≥Ôºö
         Âà§Êñ≠ÊúÄÂ∞èÂÖ¨ÂÖ±Á•ñÂÖàÊñπÊ≥ïÔºö(ancestor-p)*(ancestor-q)<=0
         Êé•‰∏ãÊù•ÈÅçÂéÜBST
         ‰ªéË∑üÂºÄÂßã
         ancestor=root
         while (ancestor!=null)
             // ÂåπÈÖç‰∏ä‰∫ÜÔºåÁõ¥Êé•ËøîÂõû
             if ( (ancestor-p)*(ancestor-q)<=0 )
                return ancestor
             // ÈÄâÂÖ∂‰∏≠‰∏Ä‰∏™ÁÇπÔºå‰∏çÊñ≠ÂêëÂÖ∂ÈÄºËøë
             if ( ancestor<p ) {
                ancestor = ancestor.right
             } else {
                ancestor = ancestor.left
             }
         */
        if (root==null) {
            return null;
        }
        TreeNode next = root;
        while (next!=null) {
            if ((next.val-p.val)*(next.val- q.val)<=0) {
                break;
            }
            if (next.val<p.val) {
                next = next.right;
            } else {
                next = next.left;
            }
        }
        return next;
    }
}
