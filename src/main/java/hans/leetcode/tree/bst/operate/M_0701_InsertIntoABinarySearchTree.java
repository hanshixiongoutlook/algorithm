package hans.leetcode.tree.bst.operate;

import hans.common.pojo.TreeNode;
import org.junit.Test;
/**
 You are given the root node of a binary search tree (BST) and a value to insert
 into the tree. Return the root node of the BST after the insertion. It is
 guaranteed that the new value does not exist in the original BST.

 Notice that there may exist multiple valid ways for the insertion, as long as
 the tree remains a BST after insertion. You can return any of them.


 Example 1:


 Input: root = [4,2,7,1,3], val = 5
 Output: [4,2,7,1,3,5]
 Explanation: Another accepted tree is:



 Example 2:


 Input: root = [40,20,60,10,30,50,70], val = 25
 Output: [40,20,60,10,30,50,70,null,null,25]


 Example 3:


 Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5
 Output: [4,2,7,1,3,5]



 Constraints:


 The number of nodes in the tree will be in the range [0, 10‚Å¥].
 -10‚Å∏ <= Node.val <= 10‚Å∏
 All the values Node.val are unique.
 -10‚Å∏ <= val <= 10‚Å∏
 It's guaranteed that val does not exist in the original BST.

 Related Topics Ê†ë ‰∫åÂèâÊêúÁ¥¢Ê†ë ‰∫åÂèâÊ†ë üëç 251 üëé 0

 */
public class M_0701_InsertIntoABinarySearchTree {
    @Test
    public void test() {
        TreeNode integerTreeNode = TreeNode.buildTree(new Integer[]{4,2,7,1,3});
        integerTreeNode.prettyPrint();
        TreeNode treeNode = this.insertIntoBST(integerTreeNode, 5);
        treeNode.prettyPrint();
    }

    /**
     * 			Runtime:0 ms, faster than 100.00% of Java online submissions.
     * 			Memory Usage:39.2 MB, less than 18.09% of Java online submissions
     * @param root
     * @param val
     * @return
     */
    public TreeNode insertIntoBST(TreeNode root, int val) {
        /*
        ÊêúÁ¥¢‰∫åÂèâÊ†ëÁâπÁÇπÔºåÊâÄÊúâËäÇÁÇπÂùáÈÅµÂæ™Â¶Ç‰∏ãËßÑÂàôÔºöleft<root<right
          4
        /   \
       2     10
      / \   / \
     1  3  7   18
          /   /  \
         6   16  20
        ÊÄùË∑ØÔºö
        1.ÊääÊï∞ÊçÆÊîæÂà∞Âè∂Â≠êËäÇÁÇπ‰∏ä
        ÊØîÂ¶ÇÔºå‰∏ä‰æã‰∏≠ÊèíÂÖ•19ÔºåÊúâ‰∏§ÁßçÊñπÂºè
            ÊñπÂºè‰∏Ä        ÊñπÂºè‰∫å
            18            18
           /  \          /  \
          16   19       16  20
                \          /
                 20       19
         ÊòæÁÑ∂ÔºåÊñπÂºè‰∫åÊõ¥ÁÆÄÂçïÔºå‰∏∫‰ªÄ‰πàÔºåÊñπÂºè‰∫åÂè™ÈúÄË¶ÅÂ∞Ü19ÊåÇÂà∞20ÂêéÂç≥ÂèØÔºåÊñπÂºè‰∏ÄÂàôÈúÄË¶ÅÂ∞Ü19ÊåÇÂà∞18ÂêéÂú®Êää20ÊåÇÂà∞19ÂêéÔºåÊòæÁÑ∂Â§ö‰∫Ü‰∏ÄÊ≠•
         2.ÊääÊï∞ÊçÆÊîæÂà∞ÂàöÂ•ΩÁ©∫Áº∫ÁöÑ‰ΩçÁΩÆ
         ÊØîÂ¶ÇÔºå‰∏ä‰æã‰∏≠ÊèíÂÖ•8
            ÊñπÂºè‰∏Ä        ÊñπÂºè‰∫å
            10            10
           /             /  \
          8             7
         /            /  \
        7            6    8
       /
      6
         ÊòæÁÑ∂Ôºå7ÁöÑÂè≥‰æßÂàöÂ•ΩÁ©∫Âá∫‰∏Ä‰∏™‰ΩçÁΩÆÔºåÊää8ÊîæËøáÂéªÂç≥ÂèØ

         Êé•‰∏ãÊù•ÊääÊÄùË∑ØËΩ¨ÂåñÊàê‰ª£Á†Å
         1.ÂØªÊâæÊèíÂÖ•‰ΩçÁΩÆ
         if (root.val<val)
            // Âè≥‰æßÂàöÂ•ΩÁ©∫Âá∫Êù•‰∫Ü
            if (root.right==null)
               root.right = val
            else
               // Âê¶ÂàôÁªßÁª≠ÂêëÂè≥Êâæ
               root.right = dfs(root.right)
         else if (root.val>val)
            // Â∑¶‰æßÂàöÂ•ΩÁ©∫Âá∫Êù•‰∫Ü
            if (root.left==null)
               root.left = val
            else
               // Âê¶ÂàôÁªßÁª≠ÂêëÂ∑¶Êâæ
               root.left = dfs(root.left)
         // ÊèíÂÖ•ÂÄºÂ¶ÇÊûúÊ†ëÈáåÂ∑≤ÁªèÊúâ‰∫ÜÂàô‰∏çÈúÄË¶ÅÂ§ÑÁêÜÔºåÂê¶Âàô‰ºöÁ†¥ÂùèÊêúÁ¥¢Ê†ëÁªìÊûÑ
         return root;


         */

        if (root==null) {
            return new TreeNode(val);
        }
        if (root.val>val) {
            if (root.left==null) {
                TreeNode node = new TreeNode(val);
                root.left = node;
            } else {
                root.left = insertIntoBST(root.left, val);
            }
        } else if (root.val<val) {
            if (root.right==null) {
                TreeNode node = new TreeNode(val);
                root.right = node;
            } else {
                root.right = insertIntoBST(root.right, val);
            }
        }
        return root;

    }
}
