package hans.leetcode.tree.easy;


import hans.common.pojo.TreeNode;
import hans.common.utils.Logger;
import org.junit.Test;

/**
 Given the root of a Binary Search Tree (BST), return the minimum absolute
 difference between the values of any two different nodes in the tree.


 Example 1:


 Input: root = [4,2,6,1,3]
 Output: 1


 Example 2:


 Input: root = [1,0,48,null,null,12,49]
 Output: 1



 Constraints:


 The number of nodes in the tree is in the range [2, 10‚Å¥].
 0 <= Node.val <= 10‚Åµ



 Note: This question is the same as 783: https://leetcode.com/problems/minimum-
 distance-between-bst-nodes/
 Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ ‰∫åÂèâÊêúÁ¥¢Ê†ë ‰∫åÂèâÊ†ë üëç 323 üëé 0

 */
public class E_0530_MinimumAbsoluteDifferenceInBST {

    @Test
    public void test() {
        TreeNode treeNode = TreeNode.buildTree(new Integer[]{236,104,701,null,227,null,911});
        treeNode.prettyPrint();
        int mode = this.getMinimumDifference(treeNode);
        Logger.log(mode);
    }
    Integer pre;
    Integer minDiff = Integer.MAX_VALUE;

    /**
     * 			Runtime:0 ms, faster than 100.00% of Java online submissions.
     * 			Memory Usage:41.2 MB, less than 29.98% of Java online submissions.
     *
     * @param root
     * @return
     */
    public int getMinimumDifference(TreeNode root) {
        /*
        ÊÄùË∑ØÔºö
        ÊêúÁ¥¢‰∫åÂèâÊ†ëÁöÑÁâπÊÄßÔºö‰∏≠Â∫èÈÅçÂéÜÔºàÂ∑¶Ê†πÂè≥ÔºâÁªìÊûúÊúâÂ∫è
        Âà©Áî®Ëøô‰∏ÄÊÄßË¥®ÔºåÂèØ‰ª•Â∞ÜÊêúÁ¥¢‰∫åÂèâÊ†ëËΩ¨ÂåñÊàê‰∏Ä‰∏™ÊúâÂ∫èÊï∞ÁªÑ
        Â∑ÆÊúÄÂ∞èÂÄº‰∏ÄÂÆö‰ºö‰∫ßÁîüÂú®Áõ∏ÈÇªÁöÑ‰∏§‰∏™ÂÖÉÁ¥†‰πãÈó¥
        ‰æãÂ¶ÇËøôÊ†∑‰∏Ä‰∏™ÊúâÂ∫èÊï∞ÁªÑÔºö1,4,9,12,13,17
        Ê≠§Êó∂Âá∫Áé∞‰ø©‰∏™ÂÖ≥ÈîÆÂèòÈáè
        1.Áõ∏ÈÇª‰∏§‰∏™ÂÖÉÁ¥†ÁöÑÂ∑ÆÂÄº
        2.Áõ∏ÈÇªÂÖÉÁ¥†

        ÂÖàÊê≠Âª∫‰∏≠Â∫èÈÅçÂéÜÊ°ÜÊû∂ÔºåÂÖ≥ÈîÆÊìç‰ΩúÂ∞±Âá∫Áé∞Âú®codeÈÉ®ÂàÜ
        void dfs(root) {
            dfs(root.left)
            // code....
            dfs(root.right)
        }
        ‰∏∫‰∫ÜËÆ°ÁÆóÁõ∏ÈÇªÂÖÉÁ¥†ÁöÑÂ∑ÆÂÄºÔºåÈúÄË¶ÅÁî®‰∏Ä‰∏™ÂèòÈáèËÆ∞ÂΩïÂΩìÂâçÂÖÉÁ¥†ÁöÑÂâç‰∏Ä‰∏™ÂÖÉÁ¥†ÔºåÂç≥Ôºåpre
        ‰∏∫‰∫ÜËé∑ÂèñÊúÄÂ∞èÂ∑ÆÂÄºÔºåÈúÄË¶Å‰∏Ä‰∏™ÂèòÈáèËÆ∞ÂΩï‰∏ãÂΩìÂâçÊúÄÂ∞èÁöÑÂ∑ÆÂÄºÔºåÂç≥ÔºådiffMin
        ÂØªÊâæÊúÄÂ∞èÂ∑ÆÂÄº
        Êñ∞ÁöÑÂ∑ÆÂÄºÔºånewDiff=root-pre
        ÊúÄÂ∞èÂ∑ÆÂÄºÔºådiffMin=min(diffMin, newDiff)
        ËÆ°ÁÆóÂÆåÊàêÂêépreÂêëÂêéÁßªÂä®‰∏Ä‰ΩçÔºåpre=root

        int pre;
        int diffMin;
        void dfs(root) {
            dfs(root.left)
            intnewDiff=root-pre;
            diffMin=min(diffMin, newDiff);
            dfs(root.right)
        }
        ÁÑ∂ÂêéÂÜçÂ§ÑÁêÜÂàùÂßãÂÄºÈóÆÈ¢òÂç≥ÂèØ
         */
        if (root==null) {
            return minDiff;
        }
        getMinimumDifference(root.left);
        if (pre==null) {
            pre = root.val;
        } else {
            minDiff = Math.min(minDiff, root.val-pre);
            pre = root.val;
        }
        getMinimumDifference(root.right);
        return minDiff;
    }
}
