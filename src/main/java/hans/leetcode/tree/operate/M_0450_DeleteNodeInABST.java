package hans.leetcode.tree.operate;

import hans.common.pojo.TreeNode;
import org.junit.Test;
import sun.reflect.generics.tree.Tree;
/**
 Given a root node reference of a BST and a key, delete the node with the given
 key in the BST. Return the root node reference (possibly updated) of the BST.

 Basically, the deletion can be divided into two stages:


 Search for a node to remove.
 If the node is found, delete the node.



 Example 1:


 Input: root = [5,3,6,2,4,null,7], key = 3
 Output: [5,4,6,2,null,null,7]
 Explanation: Given key to delete is 3. So we find the node with value 3 and
 delete it.
 One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
 Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also
 accepted.



 Example 2:


 Input: root = [5,3,6,2,4,null,7], key = 0
 Output: [5,3,6,2,4,null,7]
 Explanation: The tree does not contain a node with value = 0.


 Example 3:


 Input: root = [], key = 0
 Output: []



 Constraints:


 The number of nodes in the tree is in the range [0, 10‚Å¥].
 -10‚Åµ <= Node.val <= 10‚Åµ
 Each node has a unique value.
 root is a valid binary search tree.
 -10‚Åµ <= key <= 10‚Åµ



 Follow up: Could you solve it with time complexity O(height of tree)?
 Related Topics Ê†ë ‰∫åÂèâÊêúÁ¥¢Ê†ë ‰∫åÂèâÊ†ë üëç 618 üëé 0

 */
public class M_0450_DeleteNodeInABST {
    @Test
    public void test() {
        TreeNode integerTreeNode = TreeNode.buildSearchTree(new int[]{1,2,3,4,5,6,7,8});
        integerTreeNode.prettyPrint();
        TreeNode treeNode = this.deleteNode(integerTreeNode, 4);
        treeNode.prettyPrint();
    }

    /**
     * 			Runtime:0 ms, faster than 100.00% of Java online submissions.
     * 			Memory Usage:38.9 MB, less than 54.43% of Java online submissions.
     * @param root
     * @param key
     * @return
     */
    public TreeNode deleteNode(TreeNode root, int key) {
        /*
        ÊêúÁ¥¢‰∫åÂèâÊ†ëÁâπÁÇπÔºåÊâÄÊúâËäÇÁÇπÂùáÈÅµÂæ™Â¶Ç‰∏ãËßÑÂàôÔºöleft<root<right
          4
        /   \
       2     10
      / \   / \
     1  3  9   18
          /   /  \
         6   16  20
        / \     /  \
       5   7   19   21

        ÊÄùË∑ØÔºö
        1.Á¨¨‰∏ÄÊ≠•Ôºå‰∏ÄÂÆöÊòØÂÖàÊâæÂà∞ÁõÆÊ†áËäÇÁÇπÔºåÁÆÄÂçïÁöÑÊêúÁ¥¢‰∫åÂèâÊ†ëÈÅçÂéÜÂç≥ÂèØ
          if (root>key)
              dfs(left, key)
          else if (root<key)
              dfs(right,key)
        2.Á¨¨‰∫åÊ≠•ÔºåÊâæÂà∞ÁõÆÊ†áËäÇÁÇπÂêéÔºåÊâßË°åÂà†Èô§Êìç‰ΩúÔºåÂç≥ root==key
          > Âè∂Â≠êËäÇÁÇπÂà†Èô§ÔºåÊòæÁÑ∂Áõ¥Êé•Âà†Âç≥ÂèØ
          > ÈùûÂè∂Â≠êËäÇÁÇπÂà†Èô§Ôºå
            - Êó†Âè≥Â≠©Â≠êÔºåÊØîÂ¶ÇÂà†Èô§9ÔºåÈúÄË¶ÅÁî®7Êù•Â°´Ë°•9ÁöÑ‰ΩçÁΩÆÔºåÂç≥‰ªéÂ∑¶‰æßÊâæÂà∞ÊúÄÂ§ßÂÄº
            - ÊúâÂè≥Â≠©Â≠êÔºåÊØîÂ¶ÇÂà†18ÔºåÈúÄË¶Å‰ª•19Êù•Â°´Ë°•18ÁöÑ‰ΩçÁΩÆÔºåÂç≥‰ªéÂè≥‰æßÊâæÂà∞ÊúÄÂ∞èÂÄº

        ‰º™‰ª£Á†ÅÂèØ‰ª•ÂÜôÂá∫Êù•‰∫Ü
          func del(root, key) {
              if (root==null) return;

              if (root>key)
                  root.left = del(left, key)
              else if (root<key)
                  root.right = del(right,key)
              else {
                  if (root is leaf) return null;
                  if (root has right) {
                     int minOfRight = findMin(root.right);
                     root.right = del(root.right, minOfRight);
                  } else {
                     int maxOfLeft = findMax(root.left);
                     root.left = del(root.left, maxOfLeft);
                  }
              }
          }
          // ÊúÄÂ§ßÔºå‰∏çÂÅúÂêëÂè≥ÈÅçÂéÜÔºåÊúÄÂè≥ËæπÁöÑÂ∞±ÊòØÊúÄÂ§ßÂÄº
          func findMax(root) {
             loop root->right
             return mostRight;
          }
          // ÊúÄÂ∞èÔºå‰∏çÂÅúÂêëÂ∑¶ÈÅçÂéÜÔºåÊúÄÂ∑¶ËæπÁöÑÂ∞±ÊòØÊúÄÂ§ßÂÄº
          func findMin(root) {
             loop root->left
             return mostLeft;
          }
         */
        if (root==null) {
            return root;
        }
        if (root.val>key) {
            root.left = deleteNode(root.left, key);
        }else if (root.val<key) {
            root.right = deleteNode(root.right, key);
        } else {
            // Âè∂Â≠êËäÇÁÇπÁõ¥Êé•Âà†Èô§
            if (root.left==null&&root.right==null) {
                return null;
            } else if (root.right!=null) {
                root.val = successor(root);
                root.right = deleteNode(root.right, root.val);
            } else {
                root.val = precursor(root);
                root.left = deleteNode(root.left, root.val);
            }
        }
        return root;
    }

    /**
     * Ëé∑ÂèñÂâçÈ©±ÔºåÂç≥ÊØîÂΩìÂâçËäÇÁÇπÂ∞èÁöÑÊúÄÂ§ßËäÇÁÇπ
     * @param root
     * @return
     */
    public int precursor(TreeNode root) {
        root = root.left;
        while (root.right!=null) root = root.right;
        return root.val;
    }

    /**
     * Ëé∑ÂèñÂêéÁªßÔºåÂç≥ÊØîÂΩìÂâçËäÇÁÇπÂ§ßÁöÑÊúÄÂ∞èËäÇÁÇπ
     * @param root
     * @return
     */
    public int successor(TreeNode root) {
        root = root.right;
        while(root.left!=null) root = root.left;
        return root.val;
    }
}
