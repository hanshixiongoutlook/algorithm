package hans.leetcode.dp;

import hans.common.utils.Logger;
import org.junit.Test;

/**
 There is an m x n grid with a ball. The ball is initially at the position [
 startRow, startColumn]. You are allowed to move the ball to one of the four adjacent
 cells in the grid (possibly out of the grid crossing the grid boundary). You
 can apply at most maxMove moves to the ball.

 Given the five integers m, n, maxMove, startRow, startColumn, return the
 number of paths to move the ball out of the grid boundary. Since the answer can be
 very large, return it modulo 10‚Åπ + 7.


 Example 1:


 Input: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0
 Output: 6


 Example 2:


 Input: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1
 Output: 12



 Constraints:


 1 <= m, n <= 50
 0 <= maxMove <= 50
 0 <= startRow < m
 0 <= startColumn < n

 Related Topics Âä®ÊÄÅËßÑÂàí üëç 225 üëé 0

 */
public class M_0576_OutOfBoundaryPaths {

    @Test
    public void test() {
        int result = this.findPaths(2,2,2, 0,0);
        Logger.log(result);
    }

    /**
     * 			Success:
     * 			Runtime:4 ms, faster than 85.74% of Java online submissions.
     * 			Memory Usage:40.6 MB, less than 6.41% of Java online submissions.
     * TODO Êú™Ëß£Âá∫
     * @param m
     * @param n
     * @param maxMove
     * @param startRow
     * @param startColumn
     * @return
     */
    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {

        /*
        dp[m][x][y]
        mË°®Á§∫Ê≠•Êï∞ÔºåxË°®Á§∫Ê®™ÂùêÊ†áÔºåyË°®Á§∫Á∫µÂùêÊ†á
        ÂÄºË°®Á§∫ÔºåÁßªÂä®mÊ≠•ÔºåËÉΩÂ§ü‰ªé(startRow,startColumn)->(x,y)ÁöÑË∑ØÂæÑÊï∞

        ËæπÁïåÊÉÖÂÜµ
        // 0Ê≠•->Âà∞Ëµ∑Âßã‰ΩçÁΩÆÔºåÊòæÁÑ∂ÂèØË°åÊúâ‰∏ÄÊù°
        dp[0][startRow][startColumn]=1
        // 0Ê≠•->ÈùûËµ∑Âßã‰ΩçÁΩÆÔºåÊòæÁÑ∂‰∏çÂ≠òÂú®‰ªª‰ΩïË∑ØÂæÑ
        dp[0][x][y]=0  x!startRow || y!=startColumn

        ÁßªÂä®mÊ≠•Ôºå(startRow,startColumn)->(x,y)
        Â¶ÇÊûú0<=x<m && 0<=y<nÔºåÂÜçÊå™‰∏ÄÊ≠•Ê≤°Âá∫ÁïåÔºåÂàôË∑ØÂæÑÊï∞dp[m+1][x][y]+1
        Âê¶ÂàôÔºåÂá∫Áïå‰∫ÜÔºåÂá∫ÁïåÊï∞+1

        ÊØèÊ¨°ÁßªÂä®ÈÉΩÊúâ4‰∏™ÊñπÂêëÂèØ‰ª•ÈÄâÊã©ÔºåÂç≥
           ‰∏ä    Âè≥     ‰∏ã      Â∑¶
        [{0,1},{1,0},{0,-1},{-1,0}]

         */
        final int MOD = 1000000007;
        int[][] direct = {{0,1},{1,0},{0,-1},{-1,0}};
        int[][][] dp = new int[maxMove+1][m][n];
        dp[0][startRow][startColumn] = 1;
        int outCount = 0;
        for (int i=0; i<maxMove; i++) {
            for (int x=0; x<m; x++) {
                for (int y=0; y<n; y++) {
                    int count = dp[i][x][y];
                    if (count>0) {
                        for (int[] dir: direct) {
                            int xx = x+dir[0];
                            int yy = y+dir[1];
                            if (xx>=0&&xx<m && yy>=0&&yy<n) {
                                dp[i+1][xx][yy] = (dp[i+1][xx][yy]+count)%MOD;
                            } else {
                                outCount = (outCount+count)%MOD;
                            }
                        }
                    }
                }
            }
        }
        return outCount;
    }
}
